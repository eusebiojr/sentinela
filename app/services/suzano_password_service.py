"""
Servi√ßo para mudan√ßa de senha - Suzano SharePoint
Adaptado para estrutura existente: email, Senha, NomeExibicao, Perfil, Area
"""
import logging
from typing import Dict, Any, Tuple
from datetime import datetime

try:
    from office365.runtime.auth.authentication_context import AuthenticationContext
    from office365.sharepoint.client_context import ClientContext
    from office365.sharepoint.lists.list import List
except ImportError:
    AuthenticationContext = None
    ClientContext = None
    List = None

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class SuzanoPasswordService:
    """Servi√ßo para gerenciamento de senhas no SharePoint Suzano"""
    
    def __init__(self):
        """Inicializa o servi√ßo com configura√ß√µes Suzano"""
        self.site_url = 'https://suzano.sharepoint.com/sites/Controleoperacional'
        self.lista_usuarios = 'UsuariosPainelTorre'
        self.ctx = None
        
    def conectar_sharepoint(self, username: str, password: str) -> bool:
        """
        Estabelece conex√£o com SharePoint Suzano
        
        Args:
            username: Usu√°rio para autentica√ß√£o
            password: Senha para autentica√ß√£o
            
        Returns:
            bool: True se conectou com sucesso
        """
        try:
            if not AuthenticationContext:
                raise Exception("Biblioteca Office365 n√£o instalada")
                
            # Autentica√ß√£o
            auth_ctx = AuthenticationContext(self.site_url)
            if auth_ctx.acquire_token_for_user(username, password):
                # Contexto do cliente
                self.ctx = ClientContext(self.site_url, auth_ctx)
                
                # Teste de conex√£o
                web = self.ctx.web
                self.ctx.load(web)
                self.ctx.execute_query()
                
                logger.info(f"‚úÖ Conectado ao SharePoint Suzano: {web.properties.get('Title', 'N/A')}")
                return True
            else:
                logger.error("‚ùå Falha na autentica√ß√£o SharePoint")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar SharePoint: {e}")
            return False
    
    def validar_politica_senha(self, senha: str) -> Tuple[bool, str]:
        """
        Valida pol√≠tica de senhas (simplificada conforme solicitado)
        
        Args:
            senha: Senha a ser validada
            
        Returns:
            Tuple[bool, str]: (√©_v√°lida, mensagem_erro)
        """
        if len(senha) < 6:
            return False, "Senha deve ter pelo menos 6 caracteres"
        
        if len(senha) > 50:
            return False, "Senha n√£o pode ter mais de 50 caracteres"
        
        return True, "Senha v√°lida"
    
    def buscar_usuario_por_email(self, email: str) -> Dict[str, Any]:
        """
        Busca usu√°rio por email na lista UsuariosPainelTorre
        
        Args:
            email: Email do usu√°rio
            
        Returns:
            Dict com dados do usu√°rio ou None se n√£o encontrado
        """
        try:
            if not self.ctx:
                raise Exception("Conex√£o SharePoint n√£o estabelecida")
            
            # Buscar na lista UsuariosPainelTorre
            lista_usuarios = self.ctx.web.lists.get_by_title(self.lista_usuarios)
            
            # Query para buscar por email
            items = lista_usuarios.items.filter(f"Email eq '{email}'")
            self.ctx.load(items)
            self.ctx.execute_query()
            
            if len(items) > 0:
                usuario = items[0]
                return {
                    'ID': usuario.properties.get('ID'),
                    'Email': usuario.properties.get('Email', ''),
                    'Senha': usuario.properties.get('Senha', ''),
                    'NomeExibicao': usuario.properties.get('NomeExibicao', ''),
                    'Perfil': usuario.properties.get('Perfil', ''),
                    'Area': usuario.properties.get('Area', ''),
                    '_item': usuario  # Refer√™ncia para atualiza√ß√£o
                }
            else:
                logger.warning(f"‚ö†Ô∏è Usu√°rio n√£o encontrado: {email}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar usu√°rio: {e}")
            raise e
    
    def validar_senha_atual(self, email: str, senha_atual: str) -> bool:
        """
        Valida se a senha atual est√° correta
        
        Args:
            email: Email do usu√°rio
            senha_atual: Senha atual informada
            
        Returns:
            bool: True se senha est√° correta
        """
        try:
            usuario = self.buscar_usuario_por_email(email)
            
            if not usuario:
                return False
            
            # Compara√ß√£o direta da senha (texto plano)
            senha_armazenada = usuario.get('Senha', '')
            return senha_atual == senha_armazenada
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao validar senha: {e}")
            return False
    
    def alterar_senha(self, email: str, senha_atual: str, nova_senha: str) -> Dict[str, Any]:
        """
        Altera senha do usu√°rio no SharePoint Suzano
        
        Args:
            email: Email do usu√°rio
            senha_atual: Senha atual do usu√°rio
            nova_senha: Nova senha
            
        Returns:
            Dict com resultado da opera√ß√£o
        """
        try:
            logger.info(f"üîê Iniciando altera√ß√£o de senha para: {email}")
            
            # 1. Validar nova senha
            valida, mensagem = self.validar_politica_senha(nova_senha)
            if not valida:
                return {
                    'sucesso': False,
                    'erro': f"Pol√≠tica de senha: {mensagem}"
                }
            
            # 2. Buscar usu√°rio
            usuario = self.buscar_usuario_por_email(email)
            if not usuario:
                return {
                    'sucesso': False,
                    'erro': "Usu√°rio n√£o encontrado"
                }
            
            # 3. Verificar senha atual
            if not self.validar_senha_atual(email, senha_atual):
                logger.warning(f"‚ö†Ô∏è Tentativa de altera√ß√£o com senha incorreta: {email}")
                return {
                    'sucesso': False,
                    'erro': "Senha atual incorreta"
                }
            
            # 4. Atualizar senha no SharePoint
            usuario_item = usuario['_item']
            usuario_item.set_property('Senha', nova_senha)
            usuario_item.update()
            self.ctx.execute_query()
            
            logger.info(f"‚úÖ Senha alterada com sucesso: {email}")
            
            return {
                'sucesso': True,
                'mensagem': 'Senha alterada com sucesso'
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao alterar senha: {e}")
            return {
                'sucesso': False,
                'erro': f"Erro interno: {str(e)}"
            }
    
    def obter_dados_usuario(self, email: str) -> Dict[str, Any]:
        """
        Obt√©m dados completos do usu√°rio
        
        Args:
            email: Email do usu√°rio
            
        Returns:
            Dict com dados do usu√°rio
        """
        try:
            usuario = self.buscar_usuario_por_email(email)
            
            if usuario:
                # Remover refer√™ncia interna antes de retornar
                dados = usuario.copy()
                if '_item' in dados:
                    del dados['_item']
                return dados
            else:
                raise Exception("Usu√°rio n√£o encontrado")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter dados do usu√°rio: {e}")
            raise e


# Inst√¢ncia global do servi√ßo
suzano_password_service = SuzanoPasswordService()