"""
Estado por sess√£o - CORRE√á√ÉO DO BUG DE TROCA DE USU√ÅRIO
Cada usu√°rio ter√° seu pr√≥prio estado isolado
"""
import pandas as pd
from dataclasses import dataclass, field
from typing import Dict, Any, List, Optional
from ..utils.data_utils import DataUtils
import uuid
import threading
from ..config.logging_config import setup_logger

logger = setup_logger("session_state")


@dataclass
class SessionState:
    """Estado isolado por sess√£o/usu√°rio"""
    # Identifica√ß√£o √∫nica da sess√£o
    session_id: str = field(default_factory=lambda: str(uuid.uuid4())[:8])
    thread_id: int = field(default_factory=threading.get_ident)
    
    # Dados do usu√°rio logado
    usuario: Dict[str, Any] = None
    
    # DataFrames principais
    df_usuarios: pd.DataFrame = field(default_factory=pd.DataFrame)
    df_desvios: pd.DataFrame = field(default_factory=pd.DataFrame)
    
    # Controle de altera√ß√µes
    alteracoes_pendentes: Dict[str, Dict[str, Any]] = field(default_factory=dict)
    
    # Estado da interface
    estado_expansao: Dict[str, bool] = field(default_factory=dict)
    
    # Status de carregamento
    dados_carregados: bool = False
    carregamento_em_progresso: bool = False
    
    def __post_init__(self):
        """Log de cria√ß√£o da sess√£o"""
        logger.info(f"üîê [NOVA SESS√ÉO] ID: {self.session_id}, Thread: {self.thread_id}")
    
    def reset_dados(self):
        """Limpa todos os dados (√∫til para logout)"""
        logger.info(f"üîÑ [RESET SESS√ÉO {self.session_id}] Usu√°rio antes: {self.get_nome_usuario()}")
        
        self.usuario = None
        self.df_usuarios = pd.DataFrame()
        self.df_desvios = pd.DataFrame()
        self.alteracoes_pendentes = {}
        self.estado_expansao = {}
        self.dados_carregados = False
        self.carregamento_em_progresso = False
        
        logger.info(f"‚úÖ [RESET COMPLETO] Sess√£o {self.session_id} limpa")
    
    def is_usuario_logado(self) -> bool:
        """Verifica se h√° usu√°rio logado"""
        return self.usuario is not None
    
    def get_perfil_usuario(self) -> str:
        """Retorna o perfil do usu√°rio logado"""
        if not self.is_usuario_logado():
            return ""
        return self.usuario.get("Perfil", "").strip().lower()
    
    def get_areas_usuario(self) -> List[str]:
        """Retorna as √°reas do usu√°rio logado"""
        if not self.is_usuario_logado():
            return []
        return DataUtils.obter_areas_usuario(self.usuario)
    
    def get_nome_usuario(self) -> str:
        """Retorna o nome de exibi√ß√£o do usu√°rio"""
        if not self.is_usuario_logado():
            return ""
        return (self.usuario.get('NomeExibicao') or 
                self.usuario.get('nomeexibicao') or 
                self.usuario.get('Nome') or 
                self.usuario.get('nome') or 
                "Usu√°rio")
    
    def get_usuario_atual(self) -> Dict[str, Any]:
        """Retorna dados completos do usu√°rio atual"""
        return self.usuario if self.usuario else {}
    
    def get_id_usuario(self):
        """Retorna ID do usu√°rio atual"""
        return self.usuario.get('ID') if self.usuario else None
    
    def atualizar_usuario(self, novos_dados: dict):
        """Atualiza dados do usu√°rio com log"""
        usuario_antes = self.get_id_usuario()
        
        if self.usuario:
            self.usuario.update(novos_dados)
        else:
            self.usuario = novos_dados.copy()
            
        logger.info(f"üë§ [USU√ÅRIO ATUALIZADO] Sess√£o: {self.session_id}, "
                   f"Antes: {usuario_antes}, Depois: {self.get_id_usuario()}")
    
    def salvar_configuracao_usuario(self, chave: str, valor):
        """Salva uma configura√ß√£o espec√≠fica do usu√°rio"""
        if not self.usuario:
            self.usuario = {}
        
        if 'configuracoes' not in self.usuario:
            self.usuario['configuracoes'] = {}
        
        self.usuario['configuracoes'][chave] = valor
        logger.info(f"üìù [CONFIG] Sess√£o {self.session_id}: {chave} = {valor}")
    
    def obter_configuracao_usuario(self, chave: str, padrao=None):
        """Obt√©m uma configura√ß√£o espec√≠fica do usu√°rio"""
        if self.usuario and 'configuracoes' in self.usuario:
            return self.usuario['configuracoes'].get(chave, padrao)
        return padrao
    
    def atualizar_alteracao(self, chave: str, campo: str, valor: Any):
        """Registra uma altera√ß√£o pendente"""
        if chave not in self.alteracoes_pendentes:
            self.alteracoes_pendentes[chave] = {}
        self.alteracoes_pendentes[chave][campo] = valor
    
    def limpar_alteracoes_evento(self, evento: str):
        """Remove altera√ß√µes pendentes de um evento espec√≠fico"""
        chaves_para_remover = [k for k in self.alteracoes_pendentes.keys() 
                              if k.startswith(f"{evento}_")]
        for chave in chaves_para_remover:
            del self.alteracoes_pendentes[chave]
    
    def has_alteracoes_pendentes(self) -> bool:
        """Verifica se h√° altera√ß√µes n√£o salvas"""
        return len(self.alteracoes_pendentes) > 0


def get_session_state(page) -> SessionState:
    """
    Obt√©m ou cria o estado da sess√£o atual
    
    Args:
        page: Objeto page do Flet
        
    Returns:
        SessionState: Estado isolado da sess√£o
    """
    if not hasattr(page, '_session_state'):
        page._session_state = SessionState()
        logger.info(f"üìå [ESTADO CRIADO] Nova sess√£o para p√°gina {id(page)}")
    
    return page._session_state


def salvar_configuracoes_usuario(page, config: dict):
    """
    Salva configura√ß√µes do usu√°rio na sess√£o
    
    Args:
        page: Objeto page do Flet
        config: Dicion√°rio com configura√ß√µes
    """
    try:
        session = get_session_state(page)
        for chave, valor in config.items():
            session.salvar_configuracao_usuario(chave, valor)
        logger.info(f"‚úÖ Configura√ß√µes salvas na sess√£o {session.session_id}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao salvar configura√ß√µes: {e}")
        raise e