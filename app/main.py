"""
Entry point principal da aplica√ß√£o Sentinela
Configurado para deploy no Google Cloud Run - VERS√ÉO CORRIGIDA
"""
import flet as ft
import os
import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path para imports
sys.path.append(str(Path(__file__).parent.parent))

from app.config.settings import config
from app.config.logging_config import setup_logger

# CORRIGIDO: Usa o app_ui existente, n√£o o integrado
from app.ui.app_ui import SentinelaApp

# NOVO: Tenta importar o servi√ßo de senha para verifica√ß√£o
try:
    from app.services.suzano_password_service import suzano_password_service
    PASSWORD_SERVICE_AVAILABLE = True
except ImportError:
    PASSWORD_SERVICE_AVAILABLE = False
    suzano_password_service = None

# Setup do logger global
logger = setup_logger(level=config.log_level)


def main(page: ft.Page):
    """Fun√ß√£o principal do Flet"""
    try:
        # Configura√ß√µes b√°sicas da p√°gina
        page.title = "Painel Log√≠stico Suzano"
        page.theme_mode = ft.ThemeMode.LIGHT
        page.padding = 0
        page.bgcolor = ft.colors.GREY_50
        page.window_width = config.window_width
        page.window_maximized = config.window_maximized
        
        logger.info("üöÄ Sentinela iniciando...")
        logger.info(f"üìä Configura√ß√£o: {config.site_url}")
        
        # NOVO: Log do status do servi√ßo de senha
        if PASSWORD_SERVICE_AVAILABLE:
            logger.info("üîê Servi√ßo de senha dispon√≠vel")
            try:
                # Testa conex√£o b√°sica
                if suzano_password_service.testar_conexao():
                    logger.info("‚úÖ Servi√ßo de senha conectado e funcional")
                else:
                    logger.warning("‚ö†Ô∏è Servi√ßo de senha com problemas de conectividade")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao testar servi√ßo de senha: {e}")
        else:
            logger.warning("‚ö†Ô∏è Servi√ßo de senha n√£o dispon√≠vel")
        
        # Inicializa a aplica√ß√£o principal (vers√£o existente)
        app = SentinelaApp(page)
        app.inicializar()
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar aplica√ß√£o: {str(e)}")
        # Em caso de erro, mostra tela de erro b√°sica
        page.add(
            ft.Container(
                content=ft.Column([
                    ft.Icon(ft.icons.ERROR, size=100, color=ft.colors.RED_600),
                    ft.Text("Erro ao inicializar sistema", size=20, weight=ft.FontWeight.BOLD),
                    ft.Text(f"Detalhes: {str(e)}", size=12, color=ft.colors.GREY_600),
                    ft.Container(height=20),
                    ft.ElevatedButton(
                        "Recarregar P√°gina",
                        on_click=lambda e: page.window_destroy(),
                        bgcolor=ft.colors.BLUE_600,
                        color=ft.colors.WHITE
                    )
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                alignment=ft.alignment.center
            )
        )
        page.update()


def verificar_dependencias():
    """
    Verifica depend√™ncias cr√≠ticas antes de iniciar
    
    Returns:
        bool: True se todas as depend√™ncias est√£o OK
    """
    try:
        # Testa imports cr√≠ticos
        from office365.sharepoint.client_context import ClientContext
        from office365.runtime.auth.user_credential import UserCredential
        
        logger.info("‚úÖ Depend√™ncia Office365 OK")
        
        # Testa servi√ßo de senha
        if PASSWORD_SERVICE_AVAILABLE:
            logger.info("‚úÖ Servi√ßo de senha OK")
        else:
            logger.warning("‚ö†Ô∏è Servi√ßo de senha limitado")
        
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå Depend√™ncia ausente: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o de depend√™ncias: {e}")
        return False


def run_app():
    """Executa a aplica√ß√£o com configura√ß√µes otimizadas para Cloud Run"""
    
    # Verifica depend√™ncias antes de iniciar
    logger.info("üîç Verificando depend√™ncias do sistema...")
    if not verificar_dependencias():
        logger.error("‚ùå Falha na verifica√ß√£o de depend√™ncias - continuando com funcionalidades limitadas")
    
    # Detecta path de assets baseado no diret√≥rio atual
    current_dir = os.getcwd()
    
    if "app" in current_dir and current_dir.endswith("app"):
        # Executando de dentro da pasta app
        assets_path = "assets"
    else:
        # Executando da raiz
        assets_path = "app/assets"
    
    logger.info(f"üìÅ Assets path: {assets_path}")
    
    # Configura√ß√µes espec√≠ficas para produ√ß√£o/Cloud Run
    if os.getenv("ENVIRONMENT") == "production":
        logger.info("üöÄ Modo produ√ß√£o - Cloud Run")
        ft.app(
            target=main, 
            view=ft.AppView.WEB_BROWSER,
            host=config.host,
            port=config.port,
            assets_dir=assets_path,
            route_url_strategy="hash",
            web_renderer="html"
        )
    else:
        # Desenvolvimento local
        logger.info("üîß Modo desenvolvimento local")
        ft.app(
            target=main, 
            view=ft.AppView.WEB_BROWSER,
            host="localhost",
            port=8081,
            assets_dir=assets_path
        )


def inicializar_sistema():
    """
    Fun√ß√£o para inicializa√ß√£o completa do sistema
    √ötil para testes e verifica√ß√µes antes do deploy
    """
    print("=" * 60)
    print("üöÄ SISTEMA SENTINELA - INICIALIZA√á√ÉO")
    print("=" * 60)
    
    # Verifica configura√ß√µes
    print("üìã Verificando configura√ß√µes...")
    print(f"  ‚Ä¢ Site URL: {config.site_url}")
    print(f"  ‚Ä¢ Lista Usu√°rios: {config.usuarios_list}")
    print(f"  ‚Ä¢ Lista Desvios: {config.desvios_list}")
    print(f"  ‚Ä¢ Host: {config.host}:{config.port}")
    
    # Verifica depend√™ncias
    print("\nüîç Verificando depend√™ncias...")
    deps_ok = verificar_dependencias()
    
    # Testa servi√ßo de senha
    print("\nüîê Testando servi√ßo de senha...")
    if PASSWORD_SERVICE_AVAILABLE:
        try:
            if suzano_password_service.testar_conexao():
                print("  ‚úÖ Servi√ßo de senha: FUNCIONAL")
            else:
                print("  ‚ö†Ô∏è Servi√ßo de senha: LIMITADO (conex√£o)")
        except Exception as e:
            print(f"  ‚ùå Servi√ßo de senha: ERRO ({e})")
    else:
        print("  ‚ùå Servi√ßo de senha: INDISPON√çVEL")
    
    # Resumo
    print("\n" + "=" * 60)
    if deps_ok:
        print("‚úÖ SISTEMA PRONTO PARA EXECU√á√ÉO")
    else:
        print("‚ö†Ô∏è SISTEMA COM LIMITA√á√ïES - VERIFIQUE LOGS")
    print("=" * 60)
    
    return deps_ok


if __name__ == "__main__":
    # Inicializa√ß√£o completa com verifica√ß√µes
    try:
        # Mostra status do sistema
        sistema_ok = inicializar_sistema()
        
        # Inicia aplica√ß√£o
        print("\nüéØ Iniciando aplica√ß√£o...")
        run_app()
        
    except KeyboardInterrupt:
        logger.info("üëã Aplica√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico: {e}")
        print(f"\n‚ùå ERRO CR√çTICO: {e}")
        print("üîß Verifique as configura√ß√µes e depend√™ncias")
    finally:
        logger.info("üèÅ Finalizando aplica√ß√£o Sentinela")