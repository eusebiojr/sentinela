"""
Teste do Sistema de Tickets - Sistema Sentinela
Script para testar a funcionalidade de tickets
"""
import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent.parent))

from app.services.ticket_service import ticket_service, testar_servico_tickets
from app.services.file_upload_service import file_upload_service
from app.config.logging_config import setup_logger

logger = setup_logger("test_tickets")


def testar_conexao_sharepoint():
    """Testa conex√£o com SharePoint para tickets"""
    print("üîó Testando conex√£o SharePoint para tickets...")
    
    resultado = testar_servico_tickets()
    
    if resultado:
        print("‚úÖ Conex√£o SharePoint OK - Lista SentinelaTickets acess√≠vel")
        return True
    else:
        print("‚ùå Erro na conex√£o SharePoint")
        return False


def testar_validacao_ticket():
    """Testa valida√ß√£o de dados do ticket"""
    print("\nüìã Testando valida√ß√£o de tickets...")
    
    # Teste com dados v√°lidos
    dados_validos = {
        "motivo": "Bug tela aprova√ß√£o/preenchimento",
        "usuario": "eusebioagj@suzano.com.br",
        "descricao": "Sistema trava quando clico em aprovar. Isso acontece desde ontem ap√≥s o almo√ßo. J√° tentei recarregar a p√°gina mas o problema persiste.",
        "anexos": []
    }
    
    validacao = ticket_service.validar_dados_ticket(dados_validos)
    
    if validacao["valido"]:
        print("‚úÖ Valida√ß√£o com dados v√°lidos: OK")
    else:
        print(f"‚ùå Valida√ß√£o falhou: {validacao['erros']}")
    
    # Teste com dados inv√°lidos
    dados_invalidos = {
        "motivo": "",
        "usuario": "email-invalido",
        "descricao": "Muito curto",
        "anexos": []
    }
    
    validacao_invalida = ticket_service.validar_dados_ticket(dados_invalidos)
    
    if not validacao_invalida["valido"]:
        print("‚úÖ Valida√ß√£o com dados inv√°lidos: Rejeitou corretamente")
        print(f"   Erros detectados: {len(validacao_invalida['erros'])}")
    else:
        print("‚ùå Valida√ß√£o deveria ter falhado")


def testar_categorias_motivo():
    """Testa categorias de motivo"""
    print("\nüè∑Ô∏è Testando categorias de motivo...")
    
    from app.services.ticket_service import obter_categorias
    categorias = obter_categorias()
    
    print(f"‚úÖ {len(categorias)} categorias dispon√≠veis:")
    for i, categoria in enumerate(categorias, 1):
        print(f"   {i}. {categoria}")


def testar_orientacoes():
    """Testa orienta√ß√µes para descri√ß√£o"""
    print("\nüí° Testando orienta√ß√µes...")
    
    from app.services.ticket_service import obter_orientacoes
    orientacoes = obter_orientacoes()
    
    print(f"‚úÖ {len(orientacoes)} orienta√ß√µes dispon√≠veis:")
    for orientacao in orientacoes:
        print(f"   {orientacao}")


def testar_limites_upload():
    """Testa configura√ß√µes de upload"""
    print("\nüìÅ Testando limites de upload...")
    
    limites = file_upload_service.obter_informacoes_limites()
    
    print("‚úÖ Limites de upload:")
    print(f"   ‚Ä¢ Tamanho m√°ximo por arquivo: {limites['max_file_size_mb']} MB")
    print(f"   ‚Ä¢ Tamanho total m√°ximo: {limites['max_total_size_mb']} MB")
    print(f"   ‚Ä¢ M√°ximo de arquivos: {limites['max_files']}")
    print(f"   ‚Ä¢ Formatos aceitos: {limites['allowed_formats']}")


def testar_criacao_ticket_simulado():
    """Testa cria√ß√£o de ticket (sem enviar para SharePoint)"""
    print("\nüé´ Testando cria√ß√£o de ticket (simulado)...")
    
    # Dados de teste
    dados_teste = {
        "motivo": "Sistema inst√°vel",
        "usuario": "teste@suzano.com.br", 
        "descricao": "Sistema fica lento durante o per√≠odo da tarde. Come√ßou a acontecer na semana passada. Afeta principalmente a tela de aprova√ß√£o.",
        "anexos": []
    }
    
    # Valida primeiro
    validacao = ticket_service.validar_dados_ticket(dados_teste)
    
    if validacao["valido"]:
        print("‚úÖ Dados do ticket v√°lidos")
        print(f"   ‚Ä¢ Motivo: {validacao['dados_processados']['Motivo']}")
        print(f"   ‚Ä¢ Usu√°rio: {validacao['dados_processados']['Usuario']}")
        print(f"   ‚Ä¢ Data: {validacao['dados_processados']['Abertura']}")
        print("   ‚Ä¢ Pronto para envio ao SharePoint")
    else:
        print(f"‚ùå Dados inv√°lidos: {validacao['erros']}")


def executar_todos_os_testes():
    """Executa todos os testes"""
    print("=" * 60)
    print("üß™ INICIANDO TESTES DO SISTEMA DE TICKETS")
    print("=" * 60)
    
    try:
        # Testes que n√£o precisam de conex√£o
        testar_categorias_motivo()
        testar_orientacoes() 
        testar_limites_upload()
        testar_validacao_ticket()
        testar_criacao_ticket_simulado()
        
        # Teste de conex√£o (opcional)
        print("\n" + "=" * 60)
        print("üîó TESTE DE CONEX√ÉO SHAREPOINT (OPCIONAL)")
        print("=" * 60)
        
        if testar_conexao_sharepoint():
            print("‚úÖ Sistema pronto para produ√ß√£o!")
        else:
            print("‚ö†Ô∏è Sistema funcional, mas verificar configura√ß√£o SharePoint")
        
        print("\n" + "=" * 60)
        print("‚úÖ TESTES CONCLU√çDOS - Sistema de Tickets OK")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå ERRO NOS TESTES: {e}")
        print("üîß Verifique as configura√ß√µes e depend√™ncias")


if __name__ == "__main__":
    executar_todos_os_testes()